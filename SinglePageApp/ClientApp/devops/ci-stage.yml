
parameters:
  build_artifact_name: ""
  source_id: ""

stages:
- stage: QualityGates
  displayName: 'Quality Gates'
  jobs: 

  # Set an output variable from a job with a matrix
  - job: A
    pool:
      vmImage: 'ubuntu-18.04'
    strategy:
      maxParallel: 2
      matrix:
        debugJob:
          configuration: debug
          platform: x64
        releaseJob:
          configuration: release
          platform: x64
    steps:
    - bash: echo "##vso[task.setvariable variable=myOutputVar;isOutput=true]this is the $(configuration) value"
      name: setvarStep
    - bash: echo $(setvarStep.myOutputVar)
      name: echovar

  # Map the variable from the debug job
  - job: B
    dependsOn: A
    pool:
      vmImage: 'ubuntu-18.04'
    variables:
      myVarFromJobADebug: $[ dependencies.A.outputs['debugJob.setvarStep.myOutputVar'] ]
    steps:
    - script: echo $(myVarFromJobADebug)
      name: echovar

  - job: Build
    displayName: 'Build'
    steps:
    - checkout: none

    - task: DownloadPipelineArtifact@2
      displayName: 'Unstash source'
      inputs:
        artifact: ${{ parameters.source_id }}
        path: $(Build.SourcesDirectory)

    - task: NodeTool@0 
      inputs:
        versionSpec: '10.14.1'
      displayName: 'Install node'

    - bash: |
        cd ./SinglePageApp/ClientApp/
        npm ci
      displayName: 'npm ci'

    - bash: |
        cd ./SinglePageApp/ClientApp/
        npm run build
      displayName: 'Build app'

    - bash: |
        cd ./SinglePageApp/ClientApp/
        npm run test
      displayName: 'Run tests'

    - task: ArchiveFiles@2
      displayName: Prepare build artifacts
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)/SinglePageApp/ClientApp/build'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)/build.zip'
        replaceExistingArchive: true

    - publish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)/build.zip'
      displayName: Publish build artifacts
      artifact: ${{ parameters.build_artifact_name }}